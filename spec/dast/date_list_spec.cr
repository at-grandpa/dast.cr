require "../spec_helper"

describe Dast::DateList do
  describe "#to_s" do
    [
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "2018-03-23"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "2d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "2018-03-25"],
        expect:    "'2018-03-20 00:00:00','2018-03-22 00:00:00','2018-03-24 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "2d",
        format:    "%F",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "2018-03-25"],
        expect:    "'2018-03-20','2018-03-22','2018-03-24'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "2d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: " | ",
        quote:     "'",
        arguments: ["2018-03-20", "2018-03-25"],
        expect:    "'2018-03-20 00:00:00' | '2018-03-22 00:00:00' | '2018-03-24 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "2d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "\"",
        arguments: ["2018-03-20", "2018-03-25"],
        expect:    "\"2018-03-20 00:00:00\",\"2018-03-22 00:00:00\",\"2018-03-24 00:00:00\"",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "2d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018/03/20", "2018/03/25"],
        expect:    "'2018-03-20 00:00:00','2018-03-22 00:00:00','2018-03-24 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "2d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018/03/20 00:00:00", "2018/03/25 00:00:00"],
        expect:    "'2018-03-20 00:00:00','2018-03-22 00:00:00','2018-03-24 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1y",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "2020-03-20 00:00:00"],
        expect:    "'2018-03-20 00:00:00','2019-03-20 00:00:00','2020-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1mon",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "2018-05-20 02:00:00"],
        expect:    "'2018-03-20 00:00:00','2018-04-20 00:00:00','2018-05-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "2018-03-22 00:00:00"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1h",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "2018-03-20 02:00:00"],
        expect:    "'2018-03-20 00:00:00','2018-03-20 01:00:00','2018-03-20 02:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1m",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "2018-03-20 00:02:00"],
        expect:    "'2018-03-20 00:00:00','2018-03-20 00:01:00','2018-03-20 00:02:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1s",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "2018-03-20 00:00:02"],
        expect:    "'2018-03-20 00:00:00','2018-03-20 00:00:01','2018-03-20 00:00:02'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "3"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3", "2018-03-20"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "+3"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "+3d"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "+3day"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20", "~3"],
        expect:    "'2018-03-17 00:00:00','2018-03-18 00:00:00','2018-03-19 00:00:00','2018-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1m",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "~3m"],
        expect:    "'2018-03-19 23:57:00','2018-03-19 23:58:00','2018-03-19 23:59:00','2018-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "8d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-20 00:00:00", "~2mon"],
        expect:    "'2018-01-20 00:00:00','2018-01-28 00:00:00','2018-02-05 00:00:00','2018-02-13 00:00:00','2018-02-21 00:00:00','2018-03-01 00:00:00','2018-03-09 00:00:00','2018-03-17 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-22"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["2018-03-18"],
        expect:    "'2018-03-18 00:00:00','2018-03-19 00:00:00','2018-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["~3"],
        expect:    "'2018-03-17 00:00:00','2018-03-18 00:00:00','2018-03-19 00:00:00','2018-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3d"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["~3d"],
        expect:    "'2018-03-17 00:00:00','2018-03-18 00:00:00','2018-03-19 00:00:00','2018-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1y",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3y"],
        expect:    "'2018-03-20 00:00:00','2019-03-20 00:00:00','2020-03-20 00:00:00','2021-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1y",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["~3y"],
        expect:    "'2015-03-20 00:00:00','2016-03-20 00:00:00','2017-03-20 00:00:00','2018-03-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1mon",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3mon"],
        expect:    "'2018-03-20 00:00:00','2018-04-20 00:00:00','2018-05-20 00:00:00','2018-06-20 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3d"],
        expect:    "'2018-03-20 00:00:00','2018-03-21 00:00:00','2018-03-22 00:00:00','2018-03-23 00:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1h",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3h"],
        expect:    "'2018-03-20 00:00:00','2018-03-20 01:00:00','2018-03-20 02:00:00','2018-03-20 03:00:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1m",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3m"],
        expect:    "'2018-03-20 00:00:00','2018-03-20 00:01:00','2018-03-20 00:02:00','2018-03-20 00:03:00'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1s",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: ["3s"],
        expect:    "'2018-03-20 00:00:00','2018-03-20 00:00:01','2018-03-20 00:00:02','2018-03-20 00:00:03'",
      },
      {
        now:       Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
        interval:  "1d",
        format:    "%Y-%m-%d %H:%M:%S",
        delimiter: ",",
        quote:     "'",
        arguments: [] of String,
        expect:    "'2018-03-14 00:00:00','2018-03-15 00:00:00','2018-03-16 00:00:00','2018-03-17 00:00:00','2018-03-18 00:00:00','2018-03-19 00:00:00','2018-03-20 00:00:00'",
      },
    ].each do |spec_case|
      describe "returns #{spec_case[:expect]}, " do
        it "when #{spec_case.to_h.reject { |k, _| k.to_s == "expect" }}" do
          Dast::DateList.new(
            now: spec_case[:now],
            interval: spec_case[:interval],
            format: spec_case[:format],
            delimiter: spec_case[:delimiter],
            quote: spec_case[:quote],
            arguments: spec_case[:arguments]
          ).to_s.should eq spec_case[:expect]
        end
      end
    end
    describe "raises an Exception, " do
      [
        {
          now:               Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
          interval:          "1d",
          format:            "%Y-%m-%d %H:%M:%S",
          delimiter:         ",",
          quote:             "'",
          arguments:         ["2018-03-21", "2018-03-22", "2018-03-23"],
          exception_message: "Wrong number of arguments. (given 3, expected 0 or 1 or 2)",
        },
        {
          now:               Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
          interval:          "1d",
          format:            "%Y-%m-%d %H:%M:%S",
          delimiter:         ",",
          quote:             "'",
          arguments:         ["2018-03-21", "2018-03-22", "2018-03-23", "2018-03-24"],
          exception_message: "Wrong number of arguments. (given 4, expected 0 or 1 or 2)",
        },
        {
          now:               Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
          interval:          "1d",
          format:            "%Y-%m-%d %H:%M:%S",
          delimiter:         ",",
          quote:             "'",
          arguments:         ["2018-03-21 foo"],
          exception_message: "Invalid date format or diff format. See '--help'.",
        },
        {
          now:               Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
          interval:          "1d",
          format:            "%Y-%m-%d %H:%M:%S",
          delimiter:         ",",
          quote:             "'",
          arguments:         ["1.day"],
          exception_message: "Invalid date format or diff format. See '--help'.",
        },
        {
          now:               Time.parse("2018-03-20 00:00:00", "%Y-%m-%d %H:%M:%S", Time::Location.local),
          interval:          "1d",
          format:            "%Y-%m-%d %H:%M:%S",
          delimiter:         ",",
          quote:             "'",
          arguments:         ["2018-03-21", "1.day"],
          exception_message: "Invalid date format or diff format. See '--help'.",
        },
      ].each do |spec_case|
        it "when #{spec_case.to_h.reject { |k, _| k.to_s == "expect" }}" do
          expect_raises(Dast::DastException, spec_case[:exception_message]) do
            Dast::DateList.new(
              now: spec_case[:now],
              interval: spec_case[:interval],
              format: spec_case[:format],
              delimiter: spec_case[:delimiter],
              quote: spec_case[:quote],
              arguments: spec_case[:arguments]
            ).to_s
          end
        end
      end
    end
  end
end
